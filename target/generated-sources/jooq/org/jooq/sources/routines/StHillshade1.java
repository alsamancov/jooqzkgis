/*
 * This file is generated by jOOQ.
*/
package org.jooq.sources.routines;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.sources.Public;



/**
 * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
 */
@java.lang.Deprecated
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StHillshade1 extends AbstractRoutine<Object> {

    private static final long serialVersionUID = 1681243108;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final Parameter<Object> RETURN_VALUE = createParameter("RETURN_VALUE", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), false, false);

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final Parameter<Object> RAST = createParameter("rast", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), false, false);

    /**
     * The parameter <code>public.st_hillshade.nband</code>.
     */
    public static final Parameter<Integer> NBAND = createParameter("nband", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static final Parameter<Object> CUSTOMEXTENT = createParameter("customextent", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), false, false);

    /**
     * The parameter <code>public.st_hillshade.pixeltype</code>.
     */
    public static final Parameter<String> PIXELTYPE = createParameter("pixeltype", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'32BF'::text", org.jooq.impl.SQLDataType.CLOB)), true, false);

    /**
     * The parameter <code>public.st_hillshade.azimuth</code>.
     */
    public static final Parameter<Double> AZIMUTH = createParameter("azimuth", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("315.0", org.jooq.impl.SQLDataType.DOUBLE)), true, false);

    /**
     * The parameter <code>public.st_hillshade.altitude</code>.
     */
    public static final Parameter<Double> ALTITUDE = createParameter("altitude", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("45.0", org.jooq.impl.SQLDataType.DOUBLE)), true, false);

    /**
     * The parameter <code>public.st_hillshade.max_bright</code>.
     */
    public static final Parameter<Double> MAX_BRIGHT = createParameter("max_bright", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("255.0", org.jooq.impl.SQLDataType.DOUBLE)), true, false);

    /**
     * The parameter <code>public.st_hillshade.scale</code>.
     */
    public static final Parameter<Double> SCALE = createParameter("scale", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("1.0", org.jooq.impl.SQLDataType.DOUBLE)), true, false);

    /**
     * The parameter <code>public.st_hillshade.interpolate_nodata</code>.
     */
    public static final Parameter<Boolean> INTERPOLATE_NODATA = createParameter("interpolate_nodata", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), true, false);

    /**
     * Create a new routine call instance
     */
    public StHillshade1() {
        super("st_hillshade", Public.PUBLIC, org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"));

        setReturnParameter(RETURN_VALUE);
        addInParameter(RAST);
        addInParameter(NBAND);
        addInParameter(CUSTOMEXTENT);
        addInParameter(PIXELTYPE);
        addInParameter(AZIMUTH);
        addInParameter(ALTITUDE);
        addInParameter(MAX_BRIGHT);
        addInParameter(SCALE);
        addInParameter(INTERPOLATE_NODATA);
        setOverloaded(true);
    }

    /**
     * Set the <code>rast</code> parameter IN value to the routine
     */
    public void setRast(Object value) {
        setValue(RAST, value);
    }

    /**
     * Set the <code>rast</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setRast(Field<Object> field) {
        setField(RAST, field);
    }

    /**
     * Set the <code>nband</code> parameter IN value to the routine
     */
    public void setNband(Integer value) {
        setValue(NBAND, value);
    }

    /**
     * Set the <code>nband</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setNband(Field<Integer> field) {
        setField(NBAND, field);
    }

    /**
     * Set the <code>customextent</code> parameter IN value to the routine
     */
    public void setCustomextent(Object value) {
        setValue(CUSTOMEXTENT, value);
    }

    /**
     * Set the <code>customextent</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setCustomextent(Field<Object> field) {
        setField(CUSTOMEXTENT, field);
    }

    /**
     * Set the <code>pixeltype</code> parameter IN value to the routine
     */
    public void setPixeltype(String value) {
        setValue(PIXELTYPE, value);
    }

    /**
     * Set the <code>pixeltype</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setPixeltype(Field<String> field) {
        setField(PIXELTYPE, field);
    }

    /**
     * Set the <code>azimuth</code> parameter IN value to the routine
     */
    public void setAzimuth(Double value) {
        setValue(AZIMUTH, value);
    }

    /**
     * Set the <code>azimuth</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setAzimuth(Field<Double> field) {
        setField(AZIMUTH, field);
    }

    /**
     * Set the <code>altitude</code> parameter IN value to the routine
     */
    public void setAltitude(Double value) {
        setValue(ALTITUDE, value);
    }

    /**
     * Set the <code>altitude</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setAltitude(Field<Double> field) {
        setField(ALTITUDE, field);
    }

    /**
     * Set the <code>max_bright</code> parameter IN value to the routine
     */
    public void setMaxBright(Double value) {
        setValue(MAX_BRIGHT, value);
    }

    /**
     * Set the <code>max_bright</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setMaxBright(Field<Double> field) {
        setField(MAX_BRIGHT, field);
    }

    /**
     * Set the <code>scale</code> parameter IN value to the routine
     */
    public void setScale(Double value) {
        setValue(SCALE, value);
    }

    /**
     * Set the <code>scale</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setScale(Field<Double> field) {
        setField(SCALE, field);
    }

    /**
     * Set the <code>interpolate_nodata</code> parameter IN value to the routine
     */
    public void setInterpolateNodata(Boolean value) {
        setValue(INTERPOLATE_NODATA, value);
    }

    /**
     * Set the <code>interpolate_nodata</code> parameter to the function to be used with a {@link org.jooq.Select} statement
     */
    public void setInterpolateNodata(Field<Boolean> field) {
        setField(INTERPOLATE_NODATA, field);
    }
}
