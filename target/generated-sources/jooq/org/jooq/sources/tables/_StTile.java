/*
 * This file is generated by jOOQ.
*/
package org.jooq.sources.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.sources.Public;
import org.jooq.sources.tables.records._StTileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _StTile extends TableImpl<_StTileRecord> {

    private static final long serialVersionUID = 166774;

    /**
     * The reference instance of <code>public._st_tile</code>
     */
    public static final _StTile _ST_TILE = new _StTile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_StTileRecord> getRecordType() {
        return _StTileRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<_StTileRecord, Object> _ST_TILE_ = createField("_st_tile", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "");

    /**
     * Create a <code>public._st_tile</code> table reference
     */
    public _StTile() {
        this(DSL.name("_st_tile"), null);
    }

    /**
     * Create an aliased <code>public._st_tile</code> table reference
     */
    public _StTile(String alias) {
        this(DSL.name(alias), _ST_TILE);
    }

    /**
     * Create an aliased <code>public._st_tile</code> table reference
     */
    public _StTile(Name alias) {
        this(alias, _ST_TILE);
    }

    private _StTile(Name alias, Table<_StTileRecord> aliased) {
        this(alias, aliased, new Field[6]);
    }

    private _StTile(Name alias, Table<_StTileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _StTile as(String alias) {
        return new _StTile(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _StTile as(Name alias) {
        return new _StTile(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public _StTile rename(String name) {
        return new _StTile(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public _StTile rename(Name name) {
        return new _StTile(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public _StTile call(Object rast, Integer width, Integer height, Integer[] nband, Boolean padwithnodata, Double nodataval) {
        return new _StTile(DSL.name(getName()), null, new Field[] { 
              DSL.val(rast, org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"))
            , DSL.val(width, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(height, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(nband, org.jooq.impl.SQLDataType.INTEGER.getArrayDataType())
            , DSL.val(padwithnodata, org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)))
            , DSL.val(nodataval, org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("NULL::double precision", org.jooq.impl.SQLDataType.DOUBLE)))
        });
    }

    /**
     * Call this table-valued function
     */
    public _StTile call(Field<Object> rast, Field<Integer> width, Field<Integer> height, Field<Integer[]> nband, Field<Boolean> padwithnodata, Field<Double> nodataval) {
        return new _StTile(DSL.name(getName()), null, new Field[] { 
              rast
            , width
            , height
            , nband
            , padwithnodata
            , nodataval
        });
    }
}
