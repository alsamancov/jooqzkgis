/*
 * This file is generated by jOOQ.
*/
package org.jooq.sources.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.sources.Public;
import org.jooq.sources.tables.records._StQuantileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _StQuantile extends TableImpl<_StQuantileRecord> {

    private static final long serialVersionUID = 989181609;

    /**
     * The reference instance of <code>public._st_quantile</code>
     */
    public static final _StQuantile _ST_QUANTILE = new _StQuantile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_StQuantileRecord> getRecordType() {
        return _StQuantileRecord.class;
    }

    /**
     * The column <code>public._st_quantile.quantile</code>.
     */
    public final TableField<_StQuantileRecord, Double> QUANTILE = createField("quantile", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public._st_quantile.quantile</code>.
     */
    public final TableField<_StQuantileRecord, Double> QUANTILE = createField("quantile", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public._st_quantile.value</code>.
     */
    public final TableField<_StQuantileRecord, Double> VALUE = createField("value", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public._st_quantile.value</code>.
     */
    public final TableField<_StQuantileRecord, Double> VALUE = createField("value", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>public._st_quantile</code> table reference
     */
    public _StQuantile() {
        this(DSL.name("_st_quantile"), null);
    }

    /**
     * Create an aliased <code>public._st_quantile</code> table reference
     */
    public _StQuantile(String alias) {
        this(DSL.name(alias), _ST_QUANTILE);
    }

    /**
     * Create an aliased <code>public._st_quantile</code> table reference
     */
    public _StQuantile(Name alias) {
        this(alias, _ST_QUANTILE);
    }

    private _StQuantile(Name alias, Table<_StQuantileRecord> aliased) {
        this(alias, aliased, new Field[6]);
    }

    private _StQuantile(Name alias, Table<_StQuantileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _StQuantile as(String alias) {
        return new _StQuantile(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public _StQuantile as(Name alias) {
        return new _StQuantile(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public _StQuantile rename(String name) {
        return new _StQuantile(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public _StQuantile rename(Name name) {
        return new _StQuantile(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public _StQuantile call(String rastertable, String rastercolumn, Integer nband, Boolean excludeNodataValue, Double samplePercent, Double[] quantiles) {
        return new _StQuantile(DSL.name(getName()), null, new Field[] { 
              DSL.val(rastertable, org.jooq.impl.SQLDataType.CLOB)
            , DSL.val(rastercolumn, org.jooq.impl.SQLDataType.CLOB)
            , DSL.val(nband, org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)))
            , DSL.val(excludeNodataValue, org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)))
            , DSL.val(samplePercent, org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.DOUBLE)))
            , DSL.val(quantiles, org.jooq.impl.SQLDataType.FLOAT.getArrayDataType())
        });
    }

    /**
     * Call this table-valued function
     */
    public _StQuantile call(Field<String> rastertable, Field<String> rastercolumn, Field<Integer> nband, Field<Boolean> excludeNodataValue, Field<Double> samplePercent, Field<Double[]> quantiles) {
        return new _StQuantile(DSL.name(getName()), null, new Field[] { 
              rastertable
            , rastercolumn
            , nband
            , excludeNodataValue
            , samplePercent
            , quantiles
        });
    }
}
